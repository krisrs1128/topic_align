aligned_topics %>%
group_by(m, k_LDA, k_LDA_next) %>%
summarize(weight = sum(w), .groups = "drop")
aligned_topics_summ
aligned_topics_summ %>% as.data.frame() %>% head(50)
ordered_topics =
aligned_topics_summ %>%
filter(m == M[1]) %>%
select(m, k_LDA) %>%
distinct() %>%
arrange(k_LDA) %>%
mutate(k = row_number())
ordered_topics
this_m = "2"
this_m = this_m %>% factor(., levels = levels(M))
prev_m = next_level(this_m, n = -1)
these_topics =
aligned_topics_summ %>%
filter(m == prev_m) %>%
left_join(.,
ordered_topics %>%
filter(m == prev_m),
by = c("m","k_LDA")
)
these_topics
these_topics %>%
arrange(k_LDA, -weight) %>%
group_by(k_LDA_next) %>%
slice_head() %>%
arrange(k_LDA, -weight) %>%
ungroup() %>%
select(k_LDA_next) %>%
dplyr::rename(k_LDA = k_LDA_next) %>%
mutate(m = this_m,
k = row_number())
this_topic_order =
these_topics %>%
arrange(k_LDA, -weight) %>%
group_by(k_LDA_next) %>%
slice_head() %>%
arrange(k_LDA, -weight) %>%
ungroup() %>%
select(k_LDA_next) %>%
dplyr::rename(k_LDA = k_LDA_next) %>%
mutate(m = this_m,
k = row_number())
ordered_topics =
bind_rows(ordered_topics, this_topic_order)
this_m = "3"
this_m = this_m %>% factor(., levels = levels(M))
prev_m = next_level(this_m, n = -1)
this_m
prev_m
aligned_topics_summ %>%
filter(m == prev_m) %>%
left_join(.,
ordered_topics %>%
filter(m == prev_m),
by = c("m","k_LDA")
)
these_topics =
aligned_topics_summ %>%
filter(m == prev_m) %>%
left_join(.,
ordered_topics %>%
filter(m == prev_m),
by = c("m","k_LDA")
)
these_topics %>%
arrange(k_LDA, -weight)
these_topics %>%
arrange(k_LDA, -weight) %>%
group_by(k_LDA_next) %>%
slice_head()
these_topics %>%
arrange(k_LDA_next, -weight)
these_topics %>%
arrange(k_LDA_next, -weight) %>%
group_by(k_LDA_next) %>%
slice_head()
these_topics %>%
arrange(k_LDA_next, -weight) %>%
group_by(k_LDA_next) %>%
slice_head() %>%
arrange(k_LDA, -weight)
these_topics %>%
arrange(k_LDA_next, -weight) %>%
group_by(k_LDA_next) %>%
slice_head() %>%
arrange(k_LDA, -weight) %>%
ungroup() %>%
select(k_LDA_next)
source('~/Dropbox/VMRC_analysis/Analysis/docs_LSY/align_topic_functions.R')
aligned_topics =
align_topics(
data = asv_for_topic,
lda_models = trimmed_lda_models)
names(aligned_topics)
head(aligned_topics$gamma_alignment)
ggplot(aligned_topics$topics_order, aes(x = m, y = k, col = k_LDA)) + geom_text(aes(label = k_LDA)) + guides(col = FALSE)
g_topics =
visualize_aligned_topics(
aligned_topics = aligned_topics
)
g_topics
this_topic_order
these_topics %>%
arrange(k_LDA_next, -weight) %>%
group_by(k_LDA_next) %>%
slice_head() %>%
arrange(k_LDA, -weight) %>%
ungroup() %>%
select(k_LDA_next) %>%
dplyr::rename(k_LDA = k_LDA_next) %>%
mutate(m = this_m,
k = row_number())
source('~/Dropbox/VMRC_analysis/Analysis/docs_LSY/align_topic_functions.R')
aligned_topics =
align_topics(
data = asv_for_topic,
lda_models = trimmed_lda_models)
names(aligned_topics)
head(aligned_topics$gamma_alignment)
ggplot(aligned_topics$topics_order, aes(x = m, y = k, col = k_LDA)) + geom_text(aes(label = k_LDA)) + guides(col = FALSE)
g_topics =
visualize_aligned_topics(
aligned_topics = aligned_topics
)
g_topics
gammas = lda_models$gammas
m_ref = lda_models$gammas$m %>% levels() %>% last()
lda_models$gammas =
lda_models$gammas %>%
mutate(m_ref = m_ref %>%
factor(.,levels = levels(lda_models$gammas$m))
)
lda_models$gammas
gammas = lda_models$gammas
gammas
gammas %>%
filter(m == m_ref) %>%
arrange(d, -g)
gammas %>%
filter(m == m_ref) %>%
arrange(d, -g) %>%
group_by(d) %>%
slice_head(n = 1)
gammas %>%
filter(m == m_ref) %>%
arrange(d, -g) %>%
group_by(d) %>%
slice_head(n = 1) %>%
select(m_ref, d, k_LDA, g) %>%
dplyr::rename(g_ref = g)
t_d =
gammas %>%
filter(m == m_ref) %>%
arrange(d, -g) %>%
group_by(d) %>%
slice_head(n = 1) %>%
select(m_ref, d, k_LDA, g) %>%
dplyr::rename(g_ref = g)
table(t_d$k_LDA)
gammas_m =
gammas %>%
select(-m_ref, -K) %>%
filter(m != levels(gammas$m) %>% last()) %>%
dplyr::rename(g_m = g) %>%
select(d, m, k_LDA, g_m)
gammas_m_next =
gammas %>%
select(-m_ref, -K) %>%
filter(m != levels(gammas$m)[1]) %>%
dplyr::rename(
m_next = m,
g_next = g,
k_LDA_next = k_LDA) %>%
mutate(m = next_level(m_next, n = -1)) %>%
select(d, m, m_next, k_LDA_next, g_next)
left_join(gammas_m,
gammas_m_next,
by = c("m","d")) %>%
left_join(., t_d, by = "d")
t_d
t_d =
gammas %>%
filter(m == m_ref) %>%
arrange(d, -g) %>%
group_by(d) %>%
slice_head(n = 1) %>%
select(m_ref, d, k_LDA, g) %>%
dplyr::rename(g_ref = g,
k_LDA_ref = k_LDA)
gammas_m =
gammas %>%
select(-m_ref, -K) %>%
filter(m != levels(gammas$m) %>% last()) %>%
dplyr::rename(g_m = g) %>%
select(d, m, k_LDA, g_m)
# 2b. Gamma_m_next
gammas_m_next =
gammas %>%
select(-m_ref, -K) %>%
filter(m != levels(gammas$m)[1]) %>%
dplyr::rename(
m_next = m,
g_next = g,
k_LDA_next = k_LDA) %>%
mutate(m = next_level(m_next, n = -1)) %>%
select(d, m, m_next, k_LDA_next, g_next)
left_join(gammas_m,
gammas_m_next,
by = c("m","d")) %>%
left_join(., t_d, by = "d")
left_join(gammas_m,
gammas_m_next,
by = c("m","d")) %>%
left_join(., t_d, by = "d") %>%
select(d, m, m_next, m_ref, k_LDA, k_LDA_next, k_LDA_ref,g_m, g_next, g_ref) %>%
mutate(w = g_m * g_next) %>%
group_by(m, m_next, m_ref, k_LDA, k_LDA_next, k_LDA_ref, g_ref) %>%
summarize(w = sum(w), .groups = "drop") %>%
mutate(w = w / length(unique(gammas$d)))
t_d
t_d =
gammas %>%
filter(m == m_ref) %>%
arrange(d, -g) %>%
group_by(d) %>%
slice_head(n = 1) %>%
select(m_ref, d, k_LDA, g) %>%
dplyr::rename(g_ref = g,
k_LDA_ref = k_LDA) %>%
ungroup()
# 2a. Gamma_m
gammas_m =
gammas %>%
select(-m_ref, -K) %>%
filter(m != levels(gammas$m) %>% last()) %>%
dplyr::rename(g_m = g) %>%
select(d, m, k_LDA, g_m)
# 2b. Gamma_m_next
gammas_m_next =
gammas %>%
select(-m_ref, -K) %>%
filter(m != levels(gammas$m)[1]) %>%
dplyr::rename(
m_next = m,
g_next = g,
k_LDA_next = k_LDA) %>%
mutate(m = next_level(m_next, n = -1)) %>%
select(d, m, m_next, k_LDA_next, g_next)
# 3. weights
W =
left_join(gammas_m,
gammas_m_next,
by = c("m","d")) %>%
left_join(., t_d, by = "d") %>%
select(d, m, m_next, m_ref, k_LDA, k_LDA_next, k_LDA_ref,g_m, g_next, g_ref) %>%
mutate(w = g_m * g_next) %>%
group_by(m, m_next, m_ref, k_LDA, k_LDA_next, k_LDA_ref, g_ref) %>%
summarize(w = sum(w), .groups = "drop") %>%
mutate(w = w / length(unique(gammas$d)))
W
gammas_m
gammas_m_next
t_d
left_join(gammas_m,
gammas_m_next,
by = c("m","d")) %>%
left_join(., t_d, by = "d") %>%
select(d, m, m_next, m_ref, k_LDA, k_LDA_next, k_LDA_ref,g_m, g_next, g_ref)
W =
left_join(gammas_m,
gammas_m_next,
by = c("m","d")) %>%
left_join(., t_d, by = "d") %>%
select(d, m, m_next, m_ref, k_LDA, k_LDA_next, k_LDA_ref,g_m, g_next, g_ref) %>%
mutate(w = g_m * g_next) %>%
group_by(m, m_next, m_ref, k_LDA, k_LDA_next, k_LDA_ref) %>%
summarize(w = sum(w), .groups = "drop") %>%
mutate(w = w / length(unique(gammas$d)))
W
aligned_topics =
align_topics(
data = asv_for_topic,
lda_models = trimmed_lda_models)
names(aligned_topics)
head(aligned_topics$gamma_alignment)
ggplot(aligned_topics$topics_order, aes(x = m, y = k, col = k_LDA)) + geom_text(aes(label = k_LDA)) + guides(col = FALSE)
g_topics =
visualize_aligned_topics(
aligned_topics = aligned_topics
)
g_topics
gamma_alignment =
aligned_topics$gamma_alignment %>%
select(-contains("_LDA"))
m_ref = unique(gamma_alignment$m_ref)
M = levels(gamma_alignment$m)
h_m =
bind_rows(
gamma_alignment %>%
select(m, k, w),
gamma_alignment %>%
filter(m_next == M %>% last()) %>%
select(m_next, k_next, w) %>%
dplyr::rename(m = m_next, k = k_next)
) %>%
group_by(m) %>%
summarize(h = sum(w), .groups = "drop",
K = max(k)) %>%
mutate(remaining_space = 2 - h,
delta_k = remaining_space/(as.numeric(K)+1))
h_m
M %>% last()
gamma_alignment
gamma_alignment =
aligned_topics$gamma_alignment %>%
select(-contains("_LDA"))
m_ref = unique(gamma_alignment$m_ref)
M = levels(gamma_alignment$m)
h_m =
bind_rows(
gamma_alignment %>%
select(m, k, w),
gamma_alignment %>%
filter(m_next == M %>% last()) %>%
select(m_next, k_next, w) %>%
dplyr::rename(m = m_next, k = k_next)
) %>%
group_by(m) %>%
summarize(h = sum(w), .groups = "drop",
K = max(k)) %>%
mutate(remaining_space = 2 - h,
delta_k = remaining_space/(as.numeric(K)+1))
gamma_alignment %>% filter(m == M %>% last())
gamma_alignment %>% filter(m_next == M %>% last())
gamma_alignment %>%
filter(m_next == M %>% last()) %>%
select(m_next, k_next, k_ref, w) %>%
group_by(m_next, k_next, k_ref) %>%
summarize(w = sum(w), .groups = "drop")
gamma_alignment %>%
filter(m_next == M %>% last()) %>%
select(m_next, k_next, k_ref, w) %>%
group_by(m_next, k_next, k_ref) %>%
summarize(w = sum(w), .groups = "drop")
gamma_alignment %>%
filter(m_next == M %>% last()) %>%
select(m_next, k_next, k_ref, w) %>%
group_by(m_next, k_next, k_ref) %>%
summarize(w = sum(w), .groups = "drop") %>%
mutate(m = m_next,
k = k_next) %>%
select(m, k, k_ref, k_next, w)
layout_rect =
gamma_alignment %>%
select(m, k, k_ref, k_next, w) %>%
arrange(m, k, k_ref, k_next) %>%
# we add the last model
bind_rows(
.,
gamma_alignment %>%
filter(m_next == M %>% last()) %>%
select(m_next, k_next, k_ref, w) %>%
group_by(m_next, k_next, k_ref) %>%
summarize(w = sum(w), .groups = "drop") %>%
mutate(m = m_next,
k = k_next) %>%
select(m, k, k_ref, k_next, w)
) %>%
left_join(., h_m %>% select(m, h, delta_k), by = "m") %>%
group_by(m) %>%
mutate(cum_w = cumsum(w),
ymin = -k*delta_k - cum_w ,
ymax = ymin + w,
y = (ymin + ymax)/2,
height = w)
layout_rect =
layout_rect %>%
mutate(k_ref = k_ref %>% factor(),
m = m %>% factor(., levels = c(levels(gamma_alignment$m),"document")),
m_num = m %>% as.numeric())
OUT =
layout_rect %>%
filter(m != last(M)) %>%
select(m, k, k_ref, k_next, ymin, ymax, m_num) %>%
mutate(x = m_num + 0.2)
IN =
layout_rect %>%
filter(m != last(M)) %>%
select(m, k, k_ref, k_next, m_num, w) %>%
arrange(m, k_next, k_ref, k) %>%
mutate(m_next = next_level(m, n = 1)) %>%
left_join(
.,
h_m %>%
select(m, delta_k) %>%
dplyr::rename(m_next = m),
by = "m_next") %>%
mutate(cum_w = cumsum(w),
ymin = -k_next*delta_k - cum_w,
ymax = ymin + w,
x = m_num +1 - 0.2) %>%
select(m, k, k_ref, k_next, ymin, ymax, m_num, x)
layout_ribbons =
bind_rows(OUT, IN) %>%
arrange(m, k, k_ref, k_next)
layout_ribbons =
layout_ribbons %>%
mutate(h = ymax - ymin,
flow_id = str_c("m_",m,"|k_",k,"|k_ref_",k_ref,"|k_next_",k_next))
M_nums = unique(layout_rect$m_num)  %>%  sort()
g =
ggplot(
layout_rect,
aes(fill = k_ref)) +
geom_tile(
aes(
x = m_num, y = y,
width = 0.4,
height = height)
) +
guides(fill = FALSE) +
geom_ribbon(
data = layout_ribbons,
aes(x = x, ymin = ymin, ymax = ymax, group = flow_id, fill = k_ref),
alpha = 0.5
) +
scale_x_continuous(breaks = M_nums, minor_breaks = NULL, labels = M) +
scale_y_continuous(breaks = NULL) +
xlab("models") +
ylab("topic composition")
g
save(asv %>%  round(), file = "vm_16s_data.Rdata")
asv_counts = asv %>%  round()
save(asv_counts, file = "vm_16s_data.Rdata")
setwd("~/Documents/Work/Ladies & Gentlemen/Packages/topic_align")
# Libraries to attach
library(topicmodels)
library(slam)
# load the topic alignment functions
source("align_topic_functions.R")
vm_16s = load("vm_16s_data.Rdata")
vm_16s <- slam::as.simple_triplet_matrix(vm_16s %>%  round())
vm_16s
?save
asv_counts
save(asv_counts, file = "vm_16s_data.Rdata")
vm_16s = load("vm_16s_data.Rdata")
vm_16s
vm_16s = load(file = "vm_16s_data.Rdata")
vm_16s
vm_16s = load(file = "vm_16s_data.Rdata")
vm_16s = asv_counts
save(vm_16s, file = "vm_16s_data.Rdata")
load(file = "vm_16s_data.Rdata")
load(file = "vm_16s_data.Rdata", verbose = TRUE)
vm_16s <- slam::as.simple_triplet_matrix(vm_16s %>%  round())
vm_16s  = asv
save(vm_16s, file = "vm_16s_data.Rdata")
load(file = "vm_16s_data.Rdata", verbose = TRUE)
vm_16s <- slam::as.simple_triplet_matrix(vm_16s %>%  round())
topic_models_dir = "lda_models/"
lda_models =
run_lda_models(
data = vm_16s,
Ks = 1:13,
method = "VEM",
seed = 2,
dir = topic_models_dir
)
names(lda_models)
head(lda_models$betas)
head(lda_models$gammas)
topic_models_dir = "lda_models/"
lda_models =
run_lda_models(
data = vm_16s,
Ks = 1:13,
method = "VEM",
seed = 2,
dir = topic_models_dir
)
names(lda_models)
head(lda_models$betas)
head(lda_models$gammas)
trimmed_lda_models =
trim_models(
models = lda_models,
min_prop = 0.025)
dim(lda_models$betas)
dim(trimmed_lda_models$betas)
aligned_topics =
align_topics(
data = asv_for_topic,
lda_models = trimmed_lda_models
)
names(aligned_topics)
head(aligned_topics$gamma_alignment)
# head(aligned_topics$beta_alignment) # not implemented
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
ggplot(aligned_topics$topics_order, aes(x = K, y = k, col = k_LDA)) +
geom_text(aes(label = k_LDA)) + guides(col = FALSE)
ggplot(aligned_topics$topics_order, aes(x = m, y = k, col = k_LDA)) +
geom_text(aes(label = k_LDA)) + guides(col = FALSE)
g_aligned_topics =
visualize_aligned_topics(
aligned_topics = aligned_topics
)
g_aligned_topics
